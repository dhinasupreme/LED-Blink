#include "switch.h"

#define uint32 unsigned int

volatile uint32 *RCC_CR =  0x40023800; //RCC_CR address allocation
volatile uint32 *RCC_AHB1ENR = 0X40023800+0X30;//RCC AHB1 peripheral clock register with base+offset addr


volatile uint32 *GPIOG_MODER = 0X40021800; //GPIOG port address(MODER) output, input, analog,alternate
volatile uint32 *GPIOG_OTYPER = 0X40021800+0X04;//output type register
volatile uint32 *GPIOG_OSPEEDR = 0X40021800+0X08;//GPIO port output speed register
volatile uint32 *GPIOG_PUPDR = 0X40021800+0X0C;//GPIO port pull-up/pull-down register
volatile uint32 *GPIOG_ODR = 0X40021800+0X14;//GPIO port output data register




volatile uint32 *GPIOA_MODER = 0x40020000;
volatile uint32 *GPIOA_OTYPER = 0x40020000+0X04;
volatile uint32 *GPIOA_OSPEEDR = 0x40020000+0X08;
volatile uint32 *GPIOA_PUPDR = 0x40020000+0X0C;
volatile uint32 *GPIOA_IDR = 0x40020000+0X10;
uint32 temp;


void clock_internal_enable(void);
void gpiog_init(void);
void gpiog_init1(void); //new
void blink_led(void);
void gpioA_init(void);

int main(void){
    clock_internal_enable();
		gpiog_init1();
    gpiog_init();
    gpioA_init();
    
    while(1)
    {
				temp=(*GPIOA_IDR&1);
        if(temp ==1)
            {
        *GPIOG_ODR|=(1<<13);//pin14 High(PG14)
							*GPIOG_ODR|=(1<<14);
            }
        else
            {
				*GPIOG_ODR &=~(1<<13);//PIN13 high(PG13) 
							*GPIOG_ODR &=~(1<<14);
            }


    }
}

void clock_internal_enable(void){
    *RCC_CR |=(1<<0);
    *RCC_AHB1ENR =0X00000041;
		//*RCC_AHB1ENR |=((1<<0)(1<<6));// POrtG clk is 6... PortA clk is 0
    
}

void gpiog_init(void){
    *GPIOG_MODER |=(1<<26); //enbling PG13 pin as output
    *GPIOG_MODER &=~(1<<27);//enbling PG13 pin as output
    *GPIOG_OTYPER &=~(1<<13);//0: Output push-pull (reset state)
    *GPIOG_OSPEEDR &=~(1<<27);//selecting 01: Medium speed
    *GPIOG_OSPEEDR |= (1<<26);//selecting 01: Medium speed0
    *GPIOG_PUPDR &=~(1<<27);//00: No pull-up, pull-down
    *GPIOG_PUPDR &=~(1<<26);//00: No pull-up, pull-down
}


void gpioA_init(void){

*GPIOA_MODER &=~(1<<0);
*GPIOA_MODER &=~(1<<1);
*GPIOA_OTYPER &=~(1<<0);
*GPIOG_OSPEEDR &=~(1<<1);
*GPIOG_OSPEEDR |= (1<<0);
*GPIOA_PUPDR   &=~(1<<0);
*GPIOA_PUPDR  &=~(1<<1);
}

void gpiog_init1()
{

	*GPIOG_MODER |= (1<<28);					//Setting pin13 as Output by setting 26th bit as '1'
	*GPIOG_MODER &= ~(1<<29);					//Setting pin13 as Output by setting 27th bit as '0'
	*GPIOG_OTYPER &= ~(1<<14);				//pin13 is become link Push Pull by setting 13th bit as '1'
	*GPIOG_OSPEEDR &= ~(1<<29);				//Setting Medium speed
	*GPIOG_OSPEEDR |= (1<<28);				//Setting Medium speed
	*GPIOG_PUPDR &= ~(1<<29);					//Pin13 is become No Pull and Push
	*GPIOG_PUPDR &= ~(1<<28);					//Pin13 is become No Pull and Push
	
}